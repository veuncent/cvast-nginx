user  nginx;

### Performance settings

worker_processes     auto;  # one(1) worker or equal the number of _real_ cpu cores. 4=4 core cpu
worker_priority      15;    # renice workers to reduce priority compared to system processes for
                            # machine health. worst case nginx will get ~25% system resources at nice=15
# worker_rlimit_nofile 1024; # maximum number of open files

error_log  /var/log/nginx/error.log debug;
pid        /var/run/nginx.pid;


events {
	worker_connections 512;   # number of parallel or concurrent connections per worker_processes
	accept_mutex        on;   # serially accept() connections and pass to workers, efficient if workers gt 1
	# accept_mutex_delay 50ms; # worker process will accept mutex after this delay if not assigned. (default 500ms)
}


http {
	## sites-enabled
	include /etc/nginx/sites-enabled/*;

	## Global resolver
	resolver 8.8.8.8 8.8.4.4 valid=300s;
	resolver_timeout 5s;

	## Mime types
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

	## Logging
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
	# log_format  main  '$remote_addr $host $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $ssl_cipher $request_time';
    access_log  /var/log/nginx/access.log  main;


	## General Options
	#aio                       on;  # asynchronous file I/O, fast with ZFS, make sure sendfile=off
	charset                   utf-8; # adds the line "Content-Type" into response-header, same as "source_charset"
	gzip                      off; # disable on the fly gzip compression due to higher latency, only use gzip_static
	#gzip_http_version         1.0; # serve gzipped content to all clients including HTTP/1.0
	gzip_static               on;  # precompress content (gzip -1) with an external script
	#gzip_vary                 on;  # send response header "Vary: Accept-Encoding"
	gzip_proxied             any;  # allows compressed responses for any request even from proxies
	ignore_invalid_headers    on;
	keepalive_requests        50;  # number of requests per connection, does not affect SPDY
	keepalive_disable         none; # allow all browsers to use keepalive connections
	max_ranges                0;   # disabled to stop range header DoS attacks as resumed downloads are denied
	msie_padding              off;
	open_file_cache           max=1000 inactive=2h;
	open_file_cache_errors    on;
	open_file_cache_min_uses  1;
	open_file_cache_valid     1h;
	output_buffers            1 512;
	postpone_output           1460;   # postpone sends to match our machine's MSS
	read_ahead                512K;   # kernel read head set to the output_buffers
	recursive_error_pages     on;
	reset_timedout_connection on;  # reset timed out connections freeing ram
	sendfile                  on;  # on for decent direct disk I/O
	server_tokens             off; # version number in error pages
	server_name_in_redirect   off; # if off, nginx will use the requested Host header
	source_charset            utf-8; # same value as "charset"
	tcp_nodelay               on; # Nagle buffering algorithm, used for keepalive only
	tcp_nopush                off;


	## Timeouts, do not keep connections open longer then necessary to reduce
	# resource usage and deny Slowloris type attacks.
	client_body_timeout      60m; # maximum time between packets the client can pause when sending nginx any data
	client_header_timeout    60m; # maximum time the client has to send the entire header to nginx
	keepalive_timeout        60m; # timeout which a single keep-alive client connection will stay open
	send_timeout             9s; # maximum time between packets nginx is allowed to pause when sending the client data


	## Size Limits
	client_body_buffer_size   16k;
	#client_header_buffer_size 1k;
	client_max_body_size      	100G;
	#large_client_header_buffers 4 4k/8k;


	## Proxy settings.
	## Make sure the "timeout"s are long enough to
	## take account of over loaded back end servers or long running
	## cgi scripts. If the proxy timeout is too short the nginx proxy
	## might re-request the data over and over again, putting more
	## load on the back end server.
	# proxy_max_temp_file_size    0;
	proxy_connect_timeout      900;
	proxy_send_timeout         900;
	proxy_read_timeout         900;
	proxy_buffer_size          128k;
	proxy_buffers              4 256k;
	proxy_busy_buffers_size    256k;
	proxy_temp_file_write_size 256k;
	proxy_intercept_errors     on;

	proxy_cache_path /tmp/web_cache levels=1:2 keys_zone=webcache:10m inactive=1d max_size=2000m;
	proxy_temp_path /tmp/web_cache/tmp;
	proxy_cache_min_uses 5;

	## Limit requests to 250 requests per minute. If the
	## user's ip address goes over the limit they will be sent an
	## error 503 for every subsequent request.
	limit_req_zone  $binary_remote_addr  zone=gulag:10m   rate=250r/m;

	## Header settings
	# read more here https://gist.github.com/plentz/6737338

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    add_header Content-Security-Policy "script-src 'self' 'unsafe-inline' 'unsafe-eval' <script_source_allowed_hosts> $host; object-src 'self' $host; worker-src 'self' $host blob:; frame-ancestors 'self' <x_frame_allowed_hosts> $host ;";

	# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
	# to disable content-type sniffing on some browsers.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
	# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
	# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
	add_header X-Content-Type-Options nosniff;

	# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
	# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
	# this particular website if it was disabled by the user.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	add_header X-XSS-Protection "1; mode=block";
}
